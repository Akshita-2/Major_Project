import streamlit as st
from services.ai_services import GeminiAIHelper
import plotly.graph_objects as go

def display_skills_gap_chart(resume_skills, required_skills):
    """
    Creates and displays a radar chart visualizing the skills gap.
    Note: This is a simplified visualization. A real implementation would need
    a more sophisticated scoring of skill proficiency.
    """
    # For demonstration, we'll find common and missing skills
    resume_skills_lower = [s.lower() for s in resume_skills]
    
    # Let's assume some required skills for visualization purposes
    # A more advanced version would extract this from the job description
    demo_required = ['python', 'data analysis', 'machine learning', 'communication', 'project management', 'sql', 'tableau']
    
    labels = list(set(resume_skills_lower + demo_required))
    
    # Assign scores: 1 if present, 0.2 if missing (to create shape)
    user_scores = [1 if skill in resume_skills_lower else 0.2 for skill in labels]
    required_scores = [1 if skill in demo_required else 0.2 for skill in labels]
    
    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=user_scores,
        theta=labels,
        fill='toself',
        name='Your Skills'
    ))
    fig.add_trace(go.Scatterpolar(
        r=required_scores,
        theta=labels,
        fill='toself',
        name='Required Skills'
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=False,
                range=[0, 1.1]
            )),
        showlegend=True,
        title="Skills Gap Analysis"
    )

    st.plotly_chart(fig, use_container_width=True)

def page_course_recommendations():
    """Defines the UI and logic for the Course Recommendations page."""
    st.header("🎓 AI-Powered Skill Development")
    st.markdown("Bridge your skill gaps with personalized course recommendations from Gemini.")

    # --- Authentication and Prerequisite Checks ---
    if not st.session_state.get('logged_in', False):
        st.warning("Please log in from the main page to access this feature.")
        st.stop()

    if not st.session_state.get('resume_data') or not st.session_state.get('job_description'):
        st.info("👈 Please input your resume and a job description to get personalized recommendations.")
        return

    st.markdown("---")

    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("📈 Your Skills Gap")
        resume_skills = st.session_state.resume_data.get('skills', [])
        # In a real app, you would extract required skills from the job description
        required_skills_placeholder = [] 
        display_skills_gap_chart(resume_skills, required_skills_placeholder)

    with col2:
        st.subheader("🎯 Priority Learning Areas")
        st.markdown("Based on your skills gap, the AI recommends focusing on:")
        # This part could also be generated by the AI in a more advanced version
        st.info("🔴 **High Priority:** Machine Learning Concepts")
        st.warning("🟡 **Medium Priority:** Advanced SQL for Data Science")
        st.success("🟢 **Low Priority:** Presentation and Communication Skills")

    st.markdown("---")

    # --- AI Recommendation Trigger ---
    if st.button("🤖 Generate AI Course Recommendations", type="primary"):
        with st.spinner("🧠 Gemini is analyzing your skill gap and finding the best courses..."):
            ai_helper = GeminiAIHelper(st.session_state.gemini_model)
            skills = st.session_state.resume_data.get('skills', [])
            courses = ai_helper.generate_course_recommendations(skills, st.session_state.job_description)
            st.session_state.course_recommendations = courses

    # --- Display Recommendations ---
    if 'course_recommendations' in st.session_state and st.session_state.course_recommendations:
        st.subheader("📚 Your Personalized Learning Plan")
        
        courses = st.session_state.course_recommendations
        for i, course in enumerate(courses, 1):
            with st.expander(f"**{course.get('course_name', 'Unnamed Course')}** by {course.get('provider', 'N/A')}"):
                st.markdown(f"**Why it's recommended:** {course.get('reason', 'N/A')}")
                st.markdown(f"**Skill Gap Addressed:** `{course.get('skill_gap', 'General Skill')}`")
                st.markdown(f"**Estimated Duration:** {course.get('duration', 'Variable')}")

                btn_col1, btn_col2 = st.columns(2)
                with btn_col1:
                    # In a real app, this button would link to the course page
                    st.button(f"🔗 View Course Details", key=f"view_course_{i}")
                with btn_col2:
                    st.button(f"⭐ Add to My Learning Plan", key=f"add_plan_{i}")
    else:
        st.info("Click the button above to generate your learning plan.")

# --- Run the page ---
if __name__ == "__main__":
    page_course_recommendations()